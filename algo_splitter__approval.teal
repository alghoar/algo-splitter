#pragma version 6

// Copyright 2022 alghoar

// This file is part of AlgoSplitter.
//
// AlgoSplitter is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// AlgoSplitter is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// AlgoSplitter. If not, see <https://www.gnu.org/licenses/>.

// @file Approval Program of the AlgoSplitter smart contract. This smart
//   contract lets users split payments equally and trustlessly.
// @license GPLv3
// @copyright alghoar 2022

main:
    method "init(address[],uint64,address)void"
    txna ApplicationArgs 0
    ==
    bnz init

    method "optIntoAsset(asset)void"
    txna ApplicationArgs 0
    ==
    bnz optIntoAsset

    method "split(asset)void"
    txna ApplicationArgs 0
    ==
    bnz split

    method "withdrawOne(account,asset)void"
    txna ApplicationArgs 0
    ==
    bnz withdrawOne

    method "authorizeDeletion(bool)void"
    txna ApplicationArgs 0
    ==
    bnz authorizeDeletion

    method "remove(asset,account)void"
    txna ApplicationArgs 0
    ==
    bnz remove

    b failure

// @method init(address[],uint64,address)void
// @arg {address[]} addresses - Users for which the balance will be split
// @arg {uint64} asset - Asset that will have its balance split
// @arg {address} closeAddress - Address that will receive the Algo and, if
//   applicable, the ASA when the application is deleted
init:
    txn OnCompletion
    int NoOp
    ==
    assert

    txna ApplicationArgs 1
    int 0
    extract_uint16
    store 0

    load 0
    assert

    byte "account_count"
    load 0
    app_global_put

    load 0
    init__loop:
        store 1

        load 0
        load 1
        -
        store 2

        txna ApplicationArgs 1
        int 2
        load 2
        int 32
        *
        +
        int 32
        extract3
        store 3

        // contains:
        // - address
        // - split amount
        // - deletion authorized
        byte "account_info__"
        load 2
        itob
        concat
        load 3
        int 0
        itob
        dup
        concat
        concat
        app_global_put

        load 1
        int 1
        -
        dup
        bnz init__loop
        pop

    byte "fractions"
    int 0
    app_global_put

    byte "split"
    int 0
    app_global_put

    byte "asset"
    txna ApplicationArgs 2
    btoi
    app_global_put

    txna ApplicationArgs 3
    global ZeroAddress
    !=
    assert

    byte "close_address"
    txna ApplicationArgs 3
    app_global_put

    b success

// @method optIntoAsset(asset)void
// @arg {asset} Asset to opt into
optIntoAsset:
    txn OnCompletion
    int NoOp
    ==
    assert

    txna ApplicationArgs 1
    btoi
    txnas Assets
    store 0

    byte "asset"
    app_global_get
    load 0
    ==
    assert

    load 0
    bz success // no opt-in needed for Algo

    global CurrentApplicationAddress
    load 0
    asset_holding_get AssetBalance
    swap
    pop
    bnz success

    itxn_begin
        int 0
        itxn_field Fee

        int AssetTransfer
        itxn_field TypeEnum

        load 0
        itxn_field XferAsset

        global CurrentApplicationAddress
        itxn_field AssetReceiver
    itxn_submit

    b success

// @method split(asset)void
// @description Compute what each user will be able to withdraw based on current
//   balance and previous splits. When some amount cannot be divided, it is kept
//   around for later splits.
split:
    txn OnCompletion
    int NoOp
    ==
    assert

    byte "fractions"
    app_global_get
    store 0

    txna ApplicationArgs 1
    btoi
    txnas Assets
    store 1

    load 1
    byte "asset"
    app_global_get
    ==
    assert

    load 1
    bnz split__compute_total__asa

    split__compute_total__algo:
        global CurrentApplicationAddress
        balance
        global CurrentApplicationAddress
        min_balance
        -
        byte "split"
        app_global_get
        -
        load 0
        -
        store 2

        b split__compute_total__done

    split__compute_total__asa:
        global CurrentApplicationAddress
        load 1
        asset_holding_get AssetBalance
        assert
        byte "split"
        app_global_get
        -
        load 0
        -
        store 2

    split__compute_total__done:

    load 2
    bz success

    load 2
    load 0
    +
    store 2

    byte "account_count"
    app_global_get
    store 3

    load 2
    load 3
    /
    store 4 // single split amount

    load 4
    load 3
    *
    store 5 // total split amount

    load 2
    load 5
    -
    store 6 // fractions amount

    load 3
    split__loop:
        store 7

        load 3
        load 7
        -
        store 8

        byte "account_info__"
        load 8
        itob
        concat
        store 9

        load 9
        app_global_get
        store 10

        load 10
        extract 0 32
        store 11

        load 10
        int 32
        extract_uint64
        store 12

        load 10
        int 40
        load 10
        len
        substring3
        store 13

        load 9
        load 11
        load 12
        load 4
        +
        itob
        concat
        load 13
        concat
        app_global_put

        load 7
        int 1
        -
        dup
        bnz split__loop
        pop

    byte "fractions"
    load 6
    app_global_put

    byte "split"
    dup
    app_global_get
    load 5
    +
    app_global_put

    b success

// @method withdrawOne(account,asset)void
// @arg {account} Account which will receive the withdrawal
// @arg {asset} Asset to withdraw
withdrawOne:
    txn OnCompletion
    int NoOp
    ==
    assert

    int 0
    store 10

    int 0
    store 11

    txna ApplicationArgs 1
    btoi
    txnas Accounts
    store 0

    txna ApplicationArgs 2
    btoi
    txnas Assets
    store 1

    load 1
    byte "asset"
    app_global_get
    ==
    assert

    byte "account_count"
    app_global_get
    store 2

    load 2
    withdrawOne__loop__start:
        store 3

        load 2
        load 3
        -
        store 4

        byte "account_info__"
        load 4
        itob
        concat
        store 5

        load 5
        app_global_get
        store 6

        load 6
        extract 0 32
        store 7

        load 0
        load 7
        ==
        bz withdrawOne__loop__accounts_not_equal

        int 1
        store 10

        load 6
        int 32
        extract_uint64
        store 11

        load 5
        load 0
        int 0
        itob
        concat
        load 6
        int 40
        load 6
        len
        substring3
        concat
        app_global_put

        byte "split"
        dup
        app_global_get
        load 11
        -
        app_global_put

        b withdrawOne__loop__end

        withdrawOne__loop__accounts_not_equal:
        load 3
        int 1
        -
        dup
        bnz withdrawOne__loop__start
        pop
    withdrawOne__loop__end:

    load 10
    assert

    load 11
    bz success

    load 1
    bnz withdrawOne__transfer_asa

    withdrawOne__transfer_algo:
        itxn_begin
            int 0
            itxn_field Fee

            int Payment
            itxn_field TypeEnum

            load 0
            itxn_field Receiver

            load 11
            itxn_field Amount
        itxn_submit

        b withdrawOne__transfer_done

    withdrawOne__transfer_asa:
        itxn_begin
            int 0
            itxn_field Fee

            int AssetTransfer
            itxn_field TypeEnum

            load 0
            itxn_field AssetReceiver

            load 1
            itxn_field XferAsset

            load 11
            itxn_field AssetAmount
        itxn_submit

    withdrawOne__transfer_done:

    b success

// @method authorizeDeletion(bool)void
// @arg {bool} authorize - Whether you authorize the deletion of this app
authorizeDeletion:
    txn OnCompletion
    int NoOp
    ==
    assert

    byte "account_count"
    app_global_get
    store 0

    load 0
    authorizeDeletion__loop__start:
        store 1

        load 0
        load 1
        -
        store 2

        byte "account_info__"
        load 2
        itob
        concat
        store 3

        load 3
        app_global_get
        store 4

        load 4
        extract 0 32
        store 5

        txn Sender
        load 5
        ==
        bz authorizeDeletion__loop__accounts_not_equal

        load 3
        load 4
        int 0
        int 40
        substring3
        txna ApplicationArgs 1
        btoi
        itob
        concat
        app_global_put

        b success

        authorizeDeletion__loop__accounts_not_equal:
        load 1
        int 1
        -
        dup
        bnz authorizeDeletion__loop__start
        pop
    authorizeDeletion__loop__end:

    b failure


// @method remove(asset,account)void
// @arg {asset} asset
// @arg {account} closeAccount
remove:
    txn OnCompletion
    int DeleteApplication
    ==
    assert

    byte "account_count"
    app_global_get
    store 0

    load 0
    remove__loop__start:
        store 1

        load 0
        load 1
        -
        store 2

        byte "account_info__"
        load 2
        itob
        concat
        store 3

        load 3
        app_global_get
        store 4

        load 4
        int 40
        extract_uint64
        assert

        load 1
        int 1
        -
        dup
        bnz remove__loop__start
        pop
    remove__loop__end:

    txna ApplicationArgs 1
    btoi
    txnas Assets
    store 5

    byte "asset"
    app_global_get
    load 5
    ==
    assert

    txna ApplicationArgs 2
    btoi
    txnas Accounts
    store 6

    byte "close_address"
    app_global_get
    load 6
    ==
    assert

    itxn_begin
        load 5
        bz remove__skip_close_asa

        global CurrentApplicationAddress
        load 5
        asset_holding_get AssetBalance
        swap
        pop
        bz remove__skip_close_asa

        int 0
        itxn_field Fee

        int AssetTransfer
        itxn_field TypeEnum

        load 5
        itxn_field XferAsset

        load 6
        itxn_field AssetCloseTo
    itxn_next
        remove__skip_close_asa:
        int 0
        itxn_field Fee

        int Payment
        itxn_field TypeEnum

        load 6
        itxn_field CloseRemainderTo
    itxn_submit

    b success

failure:
    int 0
    return

success:
    int 1
    return
